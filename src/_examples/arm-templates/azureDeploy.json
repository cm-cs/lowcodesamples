{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "BaseName": {
            "type": "string"
        },
        "KeyvaultName": {
            "defaultValue": "[concat('kv-',parameters('BaseName'),'-uks')]",
            "type": "String"
        },
        "KeyVaultConnectionName": {
            "defaultValue": "keyvault",
            "type": "String"
        },
        "SQLConnectionName": {
            "defaultValue": "sql",
            "type": "String"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        }
    },
    "variables": {
        "functionAppId": "[concat(resourceGroup().location,'/providers/Microsoft.Web/sites/', parameters('BaseName'))]",
        "functionAppUrl" : "[concat('https://', parameters('BaseName'),'.azurewebsites.net/api/')]",
        "hostingPlanName": "[concat('asp-',parameters('BaseName'))]",
        "managedIdentityPrefix": "[concat('mi-',parameters('BaseName'), '')]",
        "logicAppBaseName": "[concat('logic-',parameters('BaseName'), '')]",
        "storageAccountName": "[concat('sa', uniquestring(resourceGroup().id))]",
        "apimName": "[concat('apim-', uniquestring(resourceGroup().id))]",
        "runtimeStack": "powershell",
        "timezone": "UTC"
    },
    "resources": [
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[concat(variables('managedIdentityPrefix'),'-apiauth')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[concat(variables('managedIdentityPrefix'),'-notify')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[concat(variables('managedIdentityPrefix'),'-mcp')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[concat(variables('managedIdentityPrefix'),'-consumerauth')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2023-02-01",
            "name": "[parameters('KeyvaultName')]",
            "location": "uksouth",
            "properties": {
                "sku": {
                    "family": "A",
                    "name": "Standard"
                },
                "tenantId": "[tenant().tenantId]",
                "accessPolicies": [],
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 7,
                "enableRbacAuthorization": true,
                "vaultUri": "[concat('https://', parameters('KeyvaultName'), '.vault.azure.net/')]",
                "publicNetworkAccess": "Enabled"
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('KeyVaultConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('KeyvaultName'))]"
            ],
            "properties": {
                "displayName": "[concat('con-',parameters('KeyVaultConnectionName'))]",
                "customParameterValues": {},
                "api": {
                    "name": "[parameters('KeyVaultConnectionName')]",
                    "displayName": "Azure Key Vault",
                    "description": "Azure Key Vault is a service to securely store and access secrets.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/u/shgogna/globalperconnector-train1/1.0.1639.3312/', parameters('KeyVaultConnectionName'), '/icon.png')]",
                    "brandColor": "#0079d6",
                    "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/', parameters('KeyVaultConnectionName'))]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValueType": "Alternative",
                "alternativeParameterValues": {
                    "vaultName": "[parameters('keyVaultName')]"
                },
                "testLinks": []
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[parameters('SQLConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[concat('con-', parameters('SQLConnectionName'))]",
                "customParameterValues": {},
                "api": {
                    "name": "[parameters('SQLConnectionName')]",
                    "displayName": "SQL Server",
                    "description": "Microsoft SQL Server is a relational database management system developed by Microsoft. Connect to SQL Server to manage data. You can perform various actions such as create, update, get, and delete on rows in a table.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/u/shgogna/globalperconnector-train1/1.0.1639.3312/', parameters('SQLConnectionName'), '/icon.png')]",
                    "brandColor": "#ba141a",
                    "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/', parameters('SQLConnectionName'))]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValueSet": {
                    "name": "oauthMI",
                    "values": {}
                },
                "testLinks": [
                    {
                        "requestUri": "[concat('https://management.azure.com:443',resourceGroup().id,'/providers/Microsoft.Web/connections/', parameters('SQLConnectionName'), '/extensions/proxy/testconnection?api-version=2016-06-01')]",
                        "method": "get"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[concat(variables('logicAppBaseName'),'-slacknotify')]",
            "location": "uksouth",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-notify'))]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-notify'))]",
                "[resourceId('Microsoft.Web/connections', parameters('SQLConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', parameters('KeyVaultConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "apiTokenName": {
                            "defaultValue": "sec-slackbottoken",
                            "type": "String"
                        },
                        "debugMode": {
                            "defaultValue": true,
                            "type": "Bool"
                        }
                    },
                    "staticResults": {
                        "HTTP_-_Slack_-_Auth_Test0": {
                            "status": "Succeeded",
                            "outputs": {
                                "headers": {},
                                "statusCode": "OK"
                            }
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "method": "POST",
                                "schema": {
                                    "properties": {
                                        "isUpdate": {
                                            "type": [
                                                "boolean",
                                                "null"
                                            ]
                                        },
                                        "messageBody": {
                                            "type": "string"
                                        },
                                        "messageHeader": {
                                            "type": "string"
                                        },
                                        "messageRecipients": {
                                            "items": {
                                                "properties": {
                                                    "recipient": {
                                                        "type": "string"
                                                    },
                                                    "recipientType": {
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    }
                                                },
                                                "required": [
                                                    "recipient"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "messageReference": {
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "messageType": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Build_notification_template": {
                            "actions": {
                                "Condition_-_check_status_before_notification_build": {
                                    "actions": {
                                        "Condition_-_debug_mode": {
                                            "actions": {
                                                "Append_to_array_-_messageBlocks_debug_context": {
                                                    "runAfter": {
                                                        "Compose_message_context": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "AppendToArrayVariable",
                                                    "inputs": {
                                                        "name": "messageBlocks",
                                                        "value": "@outputs('Compose_message_context')"
                                                    }
                                                },
                                                "Compose_message_context": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": {
                                                        "elements": [
                                                            {
                                                                "emoji": true,
                                                                "text": "@{outputs('Compose_runtime_info')}",
                                                                "type": "plain_text"
                                                            }
                                                        ],
                                                        "type": "context"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Condition_-_header_exists": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "equals": [
                                                            "@parameters('debugMode')",
                                                            "@true"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Condition_-_header_exists": {
                                            "actions": {
                                                "Compose_block_message_header": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": [
                                                        {
                                                            "text": {
                                                                "emoji": true,
                                                                "text": "@{body('Parse_input_data')?['messageHeader']}",
                                                                "type": "plain_text"
                                                            },
                                                            "type": "header"
                                                        },
                                                        {
                                                            "type": "divider"
                                                        }
                                                    ],
                                                    "description": "This will reset the order of the blocks so that the context is below the header"
                                                },
                                                "ReSet_variable_-_messageBlocks_from_simple_message": {
                                                    "runAfter": {
                                                        "Compose_block_message_header": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "messageBlocks",
                                                        "value": "@union(outputs('Compose_block_message_header'),outputs('Compose_block_message_header'))"
                                                    },
                                                    "description": "Uses union() to ensure the input data is represented correctly as an array when resetting the array-based variable"
                                                }
                                            },
                                            "runAfter": {},
                                            "expression": {
                                                "and": [
                                                    {
                                                        "greater": [
                                                            "@length(body('Parse_input_data')?['messageHeader'])",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Condition_-_message_body_exists": {
                                            "actions": {
                                                "Set_variable_-_messageText": {
                                                    "runAfter": {},
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "messageText",
                                                        "value": "@body('Parse_input_data')?['messageBody']"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Condition_-_debug_mode": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "greater": [
                                                            "@length(body('Parse_input_data')?['messageBody'])",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Switch_on_messageType": {
                                            "runAfter": {
                                                "Condition_-_message_body_exists": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "cases": {
                                                "Case_approval": {
                                                    "case": "approval",
                                                    "actions": {
                                                        "Compose_approval_block_choice_header": {
                                                            "runAfter": {
                                                                "Compose_approval_block_input": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Compose",
                                                            "inputs": [
                                                                {
                                                                    "text": {
                                                                        "text": "*Approval response*",
                                                                        "type": "mrkdwn"
                                                                    },
                                                                    "type": "section"
                                                                }
                                                            ]
                                                        },
                                                        "Compose_approval_block_input": {
                                                            "runAfter": {
                                                                "Compose_approval_block_message": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Compose",
                                                            "inputs": [
                                                                {
                                                                    "element": {
                                                                        "action_id": "actionText",
                                                                        "type": "plain_text_input"
                                                                    },
                                                                    "label": {
                                                                        "emoji": true,
                                                                        "text": "(optional) Comments",
                                                                        "type": "plain_text"
                                                                    },
                                                                    "optional": true,
                                                                    "type": "input"
                                                                }
                                                            ]
                                                        },
                                                        "Compose_approval_block_message": {
                                                            "runAfter": {},
                                                            "type": "Compose",
                                                            "inputs": [
                                                                {
                                                                    "text": {
                                                                        "text": "@variables('messageText')",
                                                                        "type": "mrkdwn"
                                                                    },
                                                                    "type": "section"
                                                                },
                                                                {
                                                                    "type": "divider"
                                                                }
                                                            ]
                                                        },
                                                        "Condition_-_is_new_message_and_not_update_to_existing": {
                                                            "actions": {
                                                                "Compose_merged_new_approval_template": {
                                                                    "runAfter": {
                                                                        "Compose_new_approval_required_block": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "Compose",
                                                                    "inputs": "@union(variables('messageBlocks'),outputs('Compose_approval_block_message'),outputs('Compose_approval_block_input'),outputs('Compose_approval_block_choice_header'),outputs('Compose_new_approval_required_block'))",
                                                                    "description": "union() must be performed prior to Set as a variable cannot refer to itself in a union()"
                                                                },
                                                                "Compose_new_approval_required_block": {
                                                                    "runAfter": {},
                                                                    "type": "Compose",
                                                                    "inputs": [
                                                                        {
                                                                            "elements": [
                                                                                {
                                                                                    "action_id": "actionId-0",
                                                                                    "text": {
                                                                                        "emoji": true,
                                                                                        "text": ":white_check_mark: Approve",
                                                                                        "type": "plain_text"
                                                                                    },
                                                                                    "type": "button",
                                                                                    "value": "approve_@{outputs('Compose_final_messageReference')}"
                                                                                },
                                                                                {
                                                                                    "action_id": "actionId-1",
                                                                                    "text": {
                                                                                        "emoji": true,
                                                                                        "text": ":octagonal_sign: Reject",
                                                                                        "type": "plain_text"
                                                                                    },
                                                                                    "type": "button",
                                                                                    "value": "reject_@{outputs('Compose_final_messageReference')}"
                                                                                }
                                                                            ],
                                                                            "type": "actions"
                                                                        }
                                                                    ]
                                                                },
                                                                "Set_variable_-_messageBlocks_from_new_approval_template": {
                                                                    "runAfter": {
                                                                        "Compose_merged_new_approval_template": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "messageBlocks",
                                                                        "value": "@outputs('Compose_merged_new_approval_template')"
                                                                    },
                                                                    "description": "Use \"Set variable\" instead of append, alongside the union() function in the compose above, to merge two arrays together."
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Compose_approval_block_choice_header": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "else": {
                                                                "actions": {
                                                                    "Compose_merged_updated_approval_template": {
                                                                        "runAfter": {},
                                                                        "type": "Compose",
                                                                        "inputs": "@union(variables('messageBlocks'),outputs('Compose_approval_block_message'))"
                                                                    },
                                                                    "Set_variable_-_messageBlocks_from_updated_approval_template": {
                                                                        "runAfter": {
                                                                            "Compose_merged_updated_approval_template": [
                                                                                "Succeeded"
                                                                            ]
                                                                        },
                                                                        "type": "SetVariable",
                                                                        "inputs": {
                                                                            "name": "messageBlocks",
                                                                            "value": "@outputs('Compose_merged_updated_approval_template')"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "expression": {
                                                                "or": [
                                                                    {
                                                                        "and": [
                                                                            {
                                                                                "not": {
                                                                                    "equals": [
                                                                                        "@body('Parse_input_data')?['isUpdate']",
                                                                                        "@null"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "not": {
                                                                                    "equals": [
                                                                                        "@body('Parse_input_data')?['isUpdate']",
                                                                                        "@true"
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    },
                                                                    {
                                                                        "equals": [
                                                                            "@body('Parse_input_data')?['isUpdate']",
                                                                            "@null"
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        }
                                                    }
                                                },
                                                "Case_simple": {
                                                    "case": "simple",
                                                    "actions": {
                                                        "Append_to_array_-_messageBlocks_from_simple_message": {
                                                            "runAfter": {
                                                                "Compose_simple_block_message": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "messageBlocks",
                                                                "value": "@outputs('Compose_simple_block_message')"
                                                            }
                                                        },
                                                        "Compose_simple_block_message": {
                                                            "runAfter": {},
                                                            "type": "Compose",
                                                            "inputs": {
                                                                "text": {
                                                                    "text": "@variables('messageText')",
                                                                    "type": "mrkdwn"
                                                                },
                                                                "type": "section"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            "default": {
                                                "actions": {
                                                    "Condition_-_check_message_content": {
                                                        "actions": {},
                                                        "runAfter": {},
                                                        "else": {
                                                            "actions": {
                                                                "Set_variable_-_no_message_provided": {
                                                                    "runAfter": {},
                                                                    "type": "SetVariable",
                                                                    "inputs": {
                                                                        "name": "statusCode",
                                                                        "value": 400
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "not": {
                                                                        "equals": [
                                                                            "@variables('messageText')",
                                                                            "@null"
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "greater": [
                                                                        "@length(variables('messageText'))",
                                                                        0
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    }
                                                }
                                            },
                                            "expression": "@triggerBody()?['messageType']",
                                            "type": "Switch"
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('statusCode')",
                                                    200
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Validate_input_data": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Compose_combined_response": {
                            "runAfter": {
                                "Send_Message": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "@{outputs('Compose_bad_token')}@{outputs('Compose_success_result')}@{outputs('Compose_response_action_response')}"
                        },
                        "Compose_runtime_info": {
                            "runAfter": {
                                "Initialize_variable_-_messageBlocks": [
                                    "Succeeded"
                                ],
                                "Initialize_variable_-_statusCode": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": "Workflow: @{workflow()?['run']?['id']}",
                            "description": "Use this to track any debug information that will be presented in messages as context. Use the debugMode parameter to control whether this gets included as user-facing."
                        },
                        "Fetch_and_validate_bot_credentials": {
                            "actions": {
                                "Condition_-_token_valid": {
                                    "actions": {
                                        "Set_variable_-_statusCode_(token_ok)": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "statusCode",
                                                "value": 200
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "HTTP_-_Slack_-_Auth_Test": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Compose_bad_token": {
                                                "runAfter": {},
                                                "type": "Compose",
                                                "inputs": {
                                                    "count": 0,
                                                    "status": "bad_token"
                                                }
                                            },
                                            "Set_variable_-_statusCode_(bad_token)": {
                                                "runAfter": {
                                                    "Compose_bad_token": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable",
                                                "inputs": {
                                                    "name": "statusCode",
                                                    "value": 402
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@outputs('HTTP_-_Slack_-_Auth_Test')['statusCode']",
                                                    200
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@body('HTTP_-_Slack_-_Auth_Test')?['ok']",
                                                    true
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Consider_token_cycling_here": {
                                    "actions": {},
                                    "runAfter": {
                                        "Get_Slack_token_secret": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Scope",
                                    "description": "Requires a call-back URL to be defined at the app level - one for when a pukka API manager is in place"
                                },
                                "Get_Slack_token_secret": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['keyvault']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/secrets/@{encodeURIComponent(parameters('apiTokenName'))}/value"
                                    }
                                },
                                "HTTP_-_Slack_-_Auth_Test": {
                                    "runAfter": {
                                        "Consider_token_cycling_here": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "authentication": {
                                            "type": "Raw",
                                            "value": "Bearer @{body('Get_Slack_token_secret')?['value']}"
                                        },
                                        "headers": {
                                            "Content-Type": "application/json"
                                        },
                                        "method": "POST",
                                        "uri": "https://slack.com/api/auth.test"
                                    },
                                    "runtimeConfiguration": {
                                        "staticResult": {
                                            "staticResultOptions": "Disabled",
                                            "name": "HTTP_-_Slack_-_Auth_Test0"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Compose_runtime_info": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Initialize_variable_-_messageBlocks": {
                            "runAfter": {
                                "Initialize_variable_-_messageText": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "messageBlocks",
                                        "type": "array"
                                    }
                                ]
                            },
                            "description": "Used to build out and store the message blocks used in BlockKit"
                        },
                        "Initialize_variable_-_messageText": {
                            "runAfter": {
                                "Initialize_variable_-_responseURL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "messageText",
                                        "type": "string",
                                        "value": "Hello world"
                                    }
                                ]
                            },
                            "description": "Used to store the fallback / plain-text message"
                        },
                        "Initialize_variable_-_notificationCounter": {
                            "runAfter": {
                                "Initialize_variable_-_responseURL": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "notificationCounter",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_responseURL": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "responseURL",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_statusCode": {
                            "runAfter": {
                                "Initialize_variable_-_notificationCounter": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "statusCode",
                                        "type": "integer",
                                        "value": 0
                                    }
                                ]
                            },
                            "description": "Used to confirm whether safe to continue throughout workflow. Uses HTTP codes for simplicity & well-known-ness (e.g., 200 = OK; 400 = bad request; 401 = unauthorised; 429 = rate limit hit)"
                        },
                        "Response": {
                            "runAfter": {
                                "Compose_combined_response": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "body": "@outputs('Compose_combined_response')",
                                "statusCode": "@variables('statusCode')"
                            }
                        },
                        "Send_Message": {
                            "actions": {
                                "Condition_-_check_statusCode_before_sending_message": {
                                    "actions": {
                                        "Compose_success_result": {
                                            "runAfter": {
                                                "Condition_-_user_recipient_detected": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": {
                                                "count": "@variables('notificationCounter')",
                                                "status": "notifications_sent",
                                                "upstream_status": "@variables('statusCode')"
                                            }
                                        },
                                        "Condition_-_channel_recipient_detected": {
                                            "actions": {
                                                "Filter_channel_list_for_required_recipients": {
                                                    "runAfter": {
                                                        "Parse_Slack_channel_list": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Query",
                                                    "inputs": {
                                                        "from": "@body('Parse_Slack_channel_list')?['channels']",
                                                        "where": "@or(contains(body('Select_collapsed_recipients'), concat('#',item()?['name'])),contains(body('Select_collapsed_recipients'), item()?['name']))"
                                                    }
                                                },
                                                "HTTP_-_Slack_-_Get_channels": {
                                                    "runAfter": {},
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "type": "Raw",
                                                            "value": "Bearer @{body('Get_Slack_token_secret')?['value']}"
                                                        },
                                                        "method": "GET",
                                                        "uri": "https://slack.com/api/conversations.list"
                                                    }
                                                },
                                                "Parse_Slack_channel_list": {
                                                    "runAfter": {
                                                        "HTTP_-_Slack_-_Get_channels": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('HTTP_-_Slack_-_Get_channels')",
                                                        "schema": {
                                                            "properties": {
                                                                "channels": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "context_team_id": {
                                                                                "type": "string"
                                                                            },
                                                                            "created": {
                                                                                "type": "integer"
                                                                            },
                                                                            "creator": {
                                                                                "type": "string"
                                                                            },
                                                                            "id": {
                                                                                "type": "string"
                                                                            },
                                                                            "is_archived": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_channel": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_ext_shared": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_general": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_group": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_im": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_member": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_mpim": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_org_shared": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_pending_ext_shared": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_private": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "is_shared": {
                                                                                "type": "boolean"
                                                                            },
                                                                            "name": {
                                                                                "type": "string"
                                                                            },
                                                                            "name_normalized": {
                                                                                "type": "string"
                                                                            },
                                                                            "num_members": {
                                                                                "type": "integer"
                                                                            },
                                                                            "parent_conversation": {},
                                                                            "pending_connected_team_ids": {
                                                                                "type": "array"
                                                                            },
                                                                            "pending_shared": {
                                                                                "type": "array"
                                                                            },
                                                                            "previous_names": {
                                                                                "type": "array"
                                                                            },
                                                                            "purpose": {
                                                                                "properties": {
                                                                                    "creator": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "last_set": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "value": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "shared_team_ids": {
                                                                                "items": {
                                                                                    "type": "string"
                                                                                },
                                                                                "type": "array"
                                                                            },
                                                                            "topic": {
                                                                                "properties": {
                                                                                    "creator": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "last_set": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "value": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "unlinked": {
                                                                                "type": "integer"
                                                                            },
                                                                            "updated": {
                                                                                "type": "integer"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "id",
                                                                            "name",
                                                                            "is_channel",
                                                                            "is_group",
                                                                            "is_im",
                                                                            "is_mpim",
                                                                            "is_private",
                                                                            "created",
                                                                            "is_archived",
                                                                            "is_general",
                                                                            "unlinked",
                                                                            "name_normalized",
                                                                            "is_shared",
                                                                            "is_org_shared",
                                                                            "is_pending_ext_shared",
                                                                            "pending_shared",
                                                                            "context_team_id",
                                                                            "updated",
                                                                            "parent_conversation",
                                                                            "creator",
                                                                            "is_ext_shared",
                                                                            "shared_team_ids",
                                                                            "pending_connected_team_ids",
                                                                            "is_member",
                                                                            "topic",
                                                                            "purpose",
                                                                            "previous_names",
                                                                            "num_members"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "ok": {
                                                                    "type": "boolean"
                                                                },
                                                                "response_metadata": {
                                                                    "properties": {
                                                                        "next_cursor": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Select_collapsed_recipient_types": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "greater": [
                                                            "@length(body('Select_collapsed_recipient_types'))",
                                                            0
                                                        ]
                                                    },
                                                    {
                                                        "contains": [
                                                            "@body('Select_collapsed_recipient_types')",
                                                            "channel"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Condition_-_user_recipient_detected": {
                                            "actions": {
                                                "Condition_-_user_list_fetched": {
                                                    "actions": {
                                                        "Filter_user_list_to_required_recipients": {
                                                            "runAfter": {
                                                                "Parse_Slack_user_list": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Query",
                                                            "inputs": {
                                                                "from": "@body('Parse_Slack_user_list')?['members']",
                                                                "where": "@or(contains(body('Select_collapsed_recipients'), item()?['profile']?['email']),contains(body('Select_collapsed_recipients'), item()?['name']))"
                                                            }
                                                        },
                                                        "For_each_user_recipient": {
                                                            "foreach": "@body('Filter_user_list_to_required_recipients')",
                                                            "actions": {
                                                                "Compose_user_message_body": {
                                                                    "runAfter": {},
                                                                    "type": "Compose",
                                                                    "inputs": {
                                                                        "blocks": "@variables('messageBlocks')",
                                                                        "channel": "@items('For_each_user_recipient')?['id']",
                                                                        "text": "@variables('messageText')"
                                                                    }
                                                                },
                                                                "Condition_-_DM_successful": {
                                                                    "actions": {
                                                                        "Condition_-_check_for_successful_DM": {
                                                                            "actions": {
                                                                                "Increment_variable_-_notificationCounter": {
                                                                                    "runAfter": {},
                                                                                    "type": "IncrementVariable",
                                                                                    "inputs": {
                                                                                        "name": "notificationCounter",
                                                                                        "value": 1
                                                                                    }
                                                                                }
                                                                            },
                                                                            "runAfter": {
                                                                                "Parse_user_DM_thread_response": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "expression": {
                                                                                "and": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@body('Parse_user_DM_thread_response')?['ok']",
                                                                                            "@true"
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type": "If"
                                                                        },
                                                                        "Parse_user_DM_thread_response": {
                                                                            "runAfter": {},
                                                                            "type": "ParseJson",
                                                                            "inputs": {
                                                                                "content": "@body('HTTP_-_Slack_-_Send_User_DM')",
                                                                                "schema": {
                                                                                    "properties": {
                                                                                        "channel": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "message": {
                                                                                            "properties": {
                                                                                                "app_id": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "blocks": {
                                                                                                    "items": {
                                                                                                        "properties": {
                                                                                                            "block_id": {
                                                                                                                "type": "string"
                                                                                                            },
                                                                                                            "elements": {
                                                                                                                "items": {
                                                                                                                    "properties": {
                                                                                                                        "elements": {
                                                                                                                            "items": {
                                                                                                                                "properties": {
                                                                                                                                    "text": {
                                                                                                                                        "type": "string"
                                                                                                                                    },
                                                                                                                                    "type": {
                                                                                                                                        "type": "string"
                                                                                                                                    }
                                                                                                                                },
                                                                                                                                "required": [
                                                                                                                                    "type",
                                                                                                                                    "text"
                                                                                                                                ],
                                                                                                                                "type": "object"
                                                                                                                            },
                                                                                                                            "type": "array"
                                                                                                                        },
                                                                                                                        "type": {
                                                                                                                            "type": "string"
                                                                                                                        }
                                                                                                                    },
                                                                                                                    "type": [
                                                                                                                        "object",
                                                                                                                        "null"
                                                                                                                    ]
                                                                                                                },
                                                                                                                "type": [
                                                                                                                    "array",
                                                                                                                    "null"
                                                                                                                ]
                                                                                                            },
                                                                                                            "type": {
                                                                                                                "type": "string"
                                                                                                            }
                                                                                                        },
                                                                                                        "type": [
                                                                                                            "object",
                                                                                                            "null"
                                                                                                        ]
                                                                                                    },
                                                                                                    "type": [
                                                                                                        "array",
                                                                                                        "null"
                                                                                                    ]
                                                                                                },
                                                                                                "bot_id": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "bot_profile": {
                                                                                                    "properties": {
                                                                                                        "app_id": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "deleted": {
                                                                                                            "type": "boolean"
                                                                                                        },
                                                                                                        "icons": {
                                                                                                            "properties": {
                                                                                                                "image_36": {
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "image_48": {
                                                                                                                    "type": "string"
                                                                                                                },
                                                                                                                "image_72": {
                                                                                                                    "type": "string"
                                                                                                                }
                                                                                                            },
                                                                                                            "type": "object"
                                                                                                        },
                                                                                                        "id": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "name": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "team_id": {
                                                                                                            "type": "string"
                                                                                                        },
                                                                                                        "updated": {
                                                                                                            "type": "integer"
                                                                                                        }
                                                                                                    },
                                                                                                    "type": "object"
                                                                                                },
                                                                                                "team": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "text": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "ts": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "type": {
                                                                                                    "type": "string"
                                                                                                },
                                                                                                "user": {
                                                                                                    "type": "string"
                                                                                                }
                                                                                            },
                                                                                            "type": "object"
                                                                                        },
                                                                                        "ok": {
                                                                                            "type": "boolean"
                                                                                        },
                                                                                        "ts": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {
                                                                        "HTTP_-_Slack_-_Send_User_DM": [
                                                                            "Succeeded",
                                                                            "TimedOut",
                                                                            "Skipped",
                                                                            "Failed"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@outputs('HTTP_-_Slack_-_Send_User_DM')['statusCode']",
                                                                                    200
                                                                                ]
                                                                            },
                                                                            {
                                                                                "equals": [
                                                                                    "@body('HTTP_-_Slack_-_Send_User_DM')?['ok']",
                                                                                    "@true"
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "HTTP_-_Slack_-_Send_User_DM": {
                                                                    "runAfter": {
                                                                        "Compose_user_message_body": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "type": "Http",
                                                                    "inputs": {
                                                                        "authentication": {
                                                                            "type": "Raw",
                                                                            "value": "Bearer @{body('Get_Slack_token_secret')?['value']}"
                                                                        },
                                                                        "body": "@outputs('Compose_user_message_body')",
                                                                        "headers": {
                                                                            "Content-Type": "application/json"
                                                                        },
                                                                        "method": "POST",
                                                                        "uri": "https://slack.com/api/chat.postMessage"
                                                                    }
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Filter_user_list_to_required_recipients": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Foreach"
                                                        },
                                                        "Parse_Slack_user_list": {
                                                            "runAfter": {},
                                                            "type": "ParseJson",
                                                            "inputs": {
                                                                "content": "@body('HTTP_-_Slack_-_Get_users')",
                                                                "schema": {
                                                                    "properties": {
                                                                        "members": {
                                                                            "items": {
                                                                                "properties": {
                                                                                    "color": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "deleted": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "id": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "is_admin": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_app_user": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_bot": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_email_confirmed": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_owner": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_primary_owner": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_restricted": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "is_ultra_restricted": {
                                                                                        "type": "boolean"
                                                                                    },
                                                                                    "name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "profile": {
                                                                                        "properties": {
                                                                                            "always_active": {
                                                                                                "type": "boolean"
                                                                                            },
                                                                                            "display_name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "display_name_normalized": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "fields": {
                                                                                                "type": [
                                                                                                    "object",
                                                                                                    "null"
                                                                                                ]
                                                                                            },
                                                                                            "first_name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "last_name": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "team": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "type": [
                                                                                            "object",
                                                                                            "null"
                                                                                        ]
                                                                                    },
                                                                                    "real_name": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "team_id": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "tz": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "tz_label": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "tz_offset": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "updated": {
                                                                                        "type": "integer"
                                                                                    },
                                                                                    "who_can_share_contact_card": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": "object"
                                                                            },
                                                                            "type": [
                                                                                "array",
                                                                                "null"
                                                                            ]
                                                                        },
                                                                        "ok": {
                                                                            "type": "boolean"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                }
                                                            },
                                                            "description": "May need refining based on real data"
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "HTTP_-_Slack_-_Get_users": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "equals": [
                                                                    "@outputs('HTTP_-_Slack_-_Get_users')['statusCode']",
                                                                    200
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "HTTP_-_Slack_-_Get_users": {
                                                    "runAfter": {},
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": {
                                                            "type": "Raw",
                                                            "value": "Bearer @{body('Get_Slack_token_secret')?['value']}"
                                                        },
                                                        "method": "GET",
                                                        "uri": "https://slack.com/api/users.list"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Condition_-_channel_recipient_detected": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "or": [
                                                    {
                                                        "equals": [
                                                            "@length(body('Select_collapsed_recipient_types'))",
                                                            0
                                                        ]
                                                    },
                                                    {
                                                        "contains": [
                                                            "@body('Select_collapsed_recipient_types')",
                                                            "user"
                                                        ]
                                                    },
                                                    {
                                                        "contains": [
                                                            "@body('Select_collapsed_recipient_types')",
                                                            "@null"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Select_collapsed_recipient_types": {
                                            "runAfter": {
                                                "Select_collapsed_recipients": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@body('Parse_input_data')?['messageRecipients']",
                                                "select": "@item()?['recipientType']"
                                            }
                                        },
                                        "Select_collapsed_recipients": {
                                            "runAfter": {},
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@body('Parse_input_data')?['messageRecipients']",
                                                "select": "@item()?['recipient']"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "else": {
                                        "actions": {
                                            "Compose_response_action_response": {
                                                "runAfter": {
                                                    "Condition_-_is_a_response": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Compose",
                                                "inputs": "@outputs('Compose_response_action_result')"
                                            },
                                            "Condition_-_is_a_response": {
                                                "actions": {
                                                    "Compose_response_action_result": {
                                                        "runAfter": {
                                                            "Condition_status_code_check": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Compose",
                                                        "inputs": {
                                                            "count": "@variables('notificationCounter')",
                                                            "status": "responses_parsed",
                                                            "upstream_status": "@variables('statusCode')"
                                                        }
                                                    },
                                                    "Compose_response_body": {
                                                        "runAfter": {},
                                                        "type": "Compose",
                                                        "inputs": {
                                                            "blocks": "@variables('messageBlocks')",
                                                            "text": "@variables('messageText')"
                                                        }
                                                    },
                                                    "Condition_status_code_check": {
                                                        "actions": {
                                                            "Increment_notification_response_counter": {
                                                                "runAfter": {},
                                                                "type": "IncrementVariable",
                                                                "inputs": {
                                                                    "name": "notificationCounter",
                                                                    "value": 1
                                                                }
                                                            }
                                                        },
                                                        "runAfter": {
                                                            "Set_status_code_to_match_action_response": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "expression": {
                                                            "and": [
                                                                {
                                                                    "greaterOrEquals": [
                                                                        "@variables('statusCode')",
                                                                        200
                                                                    ]
                                                                },
                                                                {
                                                                    "less": [
                                                                        "@variables('statusCode')",
                                                                        300
                                                                    ]
                                                                }
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "HTTP_-_Slack_-_Respond_to_action": {
                                                        "runAfter": {
                                                            "Compose_response_body": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "Http",
                                                        "inputs": {
                                                            "authentication": {
                                                                "type": "Raw",
                                                                "value": "Bearer @{body('Get_Slack_token_secret')?['value']}"
                                                            },
                                                            "body": "@outputs('Compose_response_body')",
                                                            "method": "POST",
                                                            "uri": "@variables('responseURL')"
                                                        }
                                                    },
                                                    "Set_status_code_to_match_action_response": {
                                                        "runAfter": {
                                                            "HTTP_-_Slack_-_Respond_to_action": [
                                                                "Succeeded",
                                                                "TimedOut",
                                                                "Skipped",
                                                                "Failed"
                                                            ]
                                                        },
                                                        "type": "SetVariable",
                                                        "inputs": {
                                                            "name": "statusCode",
                                                            "value": "@outputs('HTTP_-_Slack_-_Respond_to_action')['statusCode']"
                                                        }
                                                    }
                                                },
                                                "runAfter": {},
                                                "else": {
                                                    "actions": {
                                                        "Compose_unhappy_path": {
                                                            "runAfter": {},
                                                            "type": "Compose",
                                                            "inputs": {
                                                                "count": 0,
                                                                "status": "bad_status",
                                                                "upstream_status": "@variables('statusCode')"
                                                            }
                                                        }
                                                    }
                                                },
                                                "expression": {
                                                    "and": [
                                                        {
                                                            "greater": [
                                                                "@length(variables('responseURL'))",
                                                                0
                                                            ]
                                                        },
                                                        {
                                                            "equals": [
                                                                "@variables('statusCode')",
                                                                200
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "type": "If"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@variables('statusCode')",
                                                    200
                                                ]
                                            },
                                            {
                                                "equals": [
                                                    "@length(variables('responseURL'))",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {
                                "Build_notification_template": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Validate_input_data": {
                            "actions": {
                                "Compose_final_messageReference": {
                                    "runAfter": {
                                        "Condition_-_check_for_message_response_or_update": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@{outputs('Compose_adjusted_messageReference')}@{outputs('Compose_un-adjusted_messageReference')}"
                                },
                                "Compose_initial_messageReference": {
                                    "runAfter": {
                                        "Parse_input_data": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "@if(not(equals(body('Parse_input_data')?['messageReference'],null)),body('Parse_input_data')?['messageReference'],concat('logic-',workflow()?['run']?['name']))",
                                    "description": "Use given message reference to identify response options, otherwise use this workflow run ID. In non-approval situations, this may be used for message responses / updates. Good example of using an inline-if statement. "
                                },
                                "Condition_-_check_for_message_response_or_update": {
                                    "actions": {
                                        "Compose_adjusted_messageReference": {
                                            "runAfter": {
                                                "Set_variable_-_responseURL": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Compose",
                                            "inputs": "@outputs('Compose_initial_messageReference')",
                                            "description": "Consider stripping any http info here and leaving just the trailing identifiers"
                                        },
                                        "Set_variable_-_responseURL": {
                                            "runAfter": {},
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "responseURL",
                                                "value": "@body('Parse_input_data')?['messageReference']"
                                            },
                                            "description": "Keep the clean responseURL for later use"
                                        }
                                    },
                                    "runAfter": {
                                        "Compose_initial_messageReference": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Compose_un-adjusted_messageReference": {
                                                "runAfter": {},
                                                "type": "Compose",
                                                "inputs": "@outputs('Compose_initial_messageReference')"
                                            }
                                        }
                                    },
                                    "expression": {
                                        "or": [
                                            {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_input_data')?['isUpdate']",
                                                                "@null"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "equals": [
                                                            "@body('Parse_input_data')?['isUpdate']",
                                                            "@true"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_input_data')?['messageReference']",
                                                                "@null"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "startsWith": [
                                                            "@body('Parse_input_data')?['messageReference']",
                                                            "http"
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If",
                                    "description": "Checking for a combination of items to understand whether to update a thread or replace a message"
                                },
                                "Parse_input_data": {
                                    "runAfter": {},
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@triggerBody()",
                                        "schema": {
                                            "properties": {
                                                "isUpdate": {
                                                    "type": [
                                                        "boolean",
                                                        "null"
                                                    ]
                                                },
                                                "messageBody": {
                                                    "type": "string"
                                                },
                                                "messageHeader": {
                                                    "type": "string"
                                                },
                                                "messageRecipients": {
                                                    "items": {
                                                        "properties": {
                                                            "recipient": {
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "recipientType": {
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "type": [
                                                        "array",
                                                        "null"
                                                    ]
                                                },
                                                "messageReference": {
                                                    "type": "string"
                                                },
                                                "messageType": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Fetch_and_validate_bot_credentials": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope",
                            "description": "Consider adding validation steps here - checking quality of data etc."
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('KeyVaultConnectionName'))]",
                                "connectionName": "keyvault",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-notify'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/keyvault')]"
                            }
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[concat(variables('logicAppBaseName'),'-slackresponse')]",
            "location": "uksouth",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-notify'))]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-notify'))]",
                "[resourceId('Microsoft.Web/connections', parameters('SQLConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', parameters('KeyVaultConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "slackApprovalSearchText": {
                            "defaultValue": "Approval response",
                            "type": "String"
                        },
                        "slackResponseBrokerUrl": {
                            "defaultValue": "",
                            "type": "String"
                        }
                    },
                    "staticResults": {
                        "HTTP_-_Slack_via_LA_-_Respond_to_message_0": {
                            "status": "Succeeded",
                            "outputs": {
                                "headers": {},
                                "statusCode": "OK"
                            }
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "method": "POST",
                                "schema": {
                                    "properties": {
                                        "$content": {
                                            "type": "string"
                                        },
                                        "$content-type": {
                                            "type": "string"
                                        },
                                        "$formdata": {
                                            "items": {
                                                "properties": {
                                                    "key": {
                                                        "type": "string"
                                                    },
                                                    "value": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "key",
                                                    "value"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "actions": {
                        "Initialize_variable_-_responseResult": {
                            "runAfter": {
                                "Initialize_variable_-_responseType": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "responseResult",
                                        "type": "string"
                                    }
                                ]
                            },
                            "description": "This will house the result of an approval (minus the comments which must be dealt with separately)"
                        },
                        "Initialize_variable_-_responseType": {
                            "runAfter": {
                                "Response_-_always_200_OK_for_Slack_interaction": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "responseType",
                                        "type": "string",
                                        "value": "simple"
                                    }
                                ]
                            }
                        },
                        "Response_-_always_200_OK_for_Slack_interaction": {
                            "runAfter": {},
                            "type": "Response",
                            "kind": "Http",
                            "inputs": {
                                "statusCode": 200
                            }
                        },
                        "Scope_-_Perform_subsequent_latent_actions": {
                            "actions": {
                                "Compose_form_data_array": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "@triggerBody()?['$formData']"
                                },
                                "Condition_-_payload_present": {
                                    "actions": {
                                        "Compose_payload_data": {
                                            "runAfter": {},
                                            "type": "Compose",
                                            "inputs": "@body('Filter_for_payload')[0]?['value']"
                                        },
                                        "Condition_-_response_url_given": {
                                            "actions": {
                                                "Compose_combined_messageBody": {
                                                    "runAfter": {
                                                        "Condition_-_check_for_approval_response": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": "@{outputs('Compose_response_to_messageBody')}@{outputs('Compose_updated_messageBody')}"
                                                },
                                                "Compose_response_body": {
                                                    "runAfter": {
                                                        "Compose_combined_messageBody": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": {
                                                        "isUpdate": true,
                                                        "messageBody": "@outputs('Compose_combined_messageBody')",
                                                        "messageHeader": "@{if(equals(length(body('Filter_blocks_for_message_header')),1),body('Filter_blocks_for_message_header')[0]?['text']?['text'],'')}",
                                                        "messageRecipients": [],
                                                        "messageReference": "@body('Parse_payload_JSON')?['response_url']",
                                                        "messageType": "@variables('responseType')"
                                                    },
                                                    "description": "The direct response to a given Slack URL should have an empty recipient list, to avoid duplication of messages"
                                                },
                                                "Condition_-_check_for_approval_response": {
                                                    "actions": {
                                                        "Compose_updated_messageBody": {
                                                            "runAfter": {
                                                                "Condition_-_approval_response_given": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Compose",
                                                            "inputs": "@{body('Parse_payload_JSON')?['message']?['text']}\n\n_Status: @{variables('responseResult')}_"
                                                        },
                                                        "Condition_-_approval_response_given": {
                                                            "actions": {
                                                                "Condition_-_approval_response_rejected": {
                                                                    "actions": {
                                                                        "Set_variable_-_responseResult_=_rejected": {
                                                                            "runAfter": {},
                                                                            "type": "SetVariable",
                                                                            "inputs": {
                                                                                "name": "responseResult",
                                                                                "value": ":octagonal_sign: Rejected"
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "else": {
                                                                        "actions": {
                                                                            "Set_variable_-_responseResult_=_approved": {
                                                                                "runAfter": {},
                                                                                "type": "SetVariable",
                                                                                "inputs": {
                                                                                    "name": "responseResult",
                                                                                    "value": ":white_check_mark: Approved"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "startsWith": [
                                                                                    "@body('Filter_blocks_for_approval_status')[0]?['value']",
                                                                                    "reject_"
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            },
                                                            "runAfter": {
                                                                "Filter_blocks_for_approval_status": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "else": {
                                                                "actions": {
                                                                    "Set_variable_-_unknown_responseResult": {
                                                                        "runAfter": {},
                                                                        "type": "SetVariable",
                                                                        "inputs": {
                                                                            "name": "responseResult",
                                                                            "value": "Deferred"
                                                                        },
                                                                        "description": "This is a catch, so if hit should probably have some other logic around it to deal with the scenario"
                                                                    }
                                                                }
                                                            },
                                                            "expression": {
                                                                "and": [
                                                                    {
                                                                        "equals": [
                                                                            "@length(body('Filter_blocks_for_approval_status'))",
                                                                            1
                                                                        ]
                                                                    }
                                                                ]
                                                            },
                                                            "type": "If"
                                                        },
                                                        "Filter_blocks_for_approval_status": {
                                                            "runAfter": {
                                                                "Set_variable_-_responseType": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Query",
                                                            "inputs": {
                                                                "from": "@body('Parse_payload_JSON')?['actions']",
                                                                "where": "@startsWith(item()?['action_id'], 'actionId-')"
                                                            }
                                                        },
                                                        "Set_variable_-_responseType": {
                                                            "runAfter": {},
                                                            "type": "SetVariable",
                                                            "inputs": {
                                                                "name": "responseType",
                                                                "value": "approval"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Filter_blocks_for_message_type": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "else": {
                                                        "actions": {
                                                            "Compose_response_to_messageBody": {
                                                                "runAfter": {},
                                                                "type": "Compose",
                                                                "inputs": "@body('Parse_payload_JSON')?['message']?['text']"
                                                            }
                                                        }
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "greater": [
                                                                    "@length(body('Filter_blocks_for_message_type'))",
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Filter_blocks_for_message_header": {
                                                    "runAfter": {},
                                                    "type": "Query",
                                                    "inputs": {
                                                        "from": "@body('Parse_payload_JSON')?['message']?['blocks']",
                                                        "where": "@equals(item()?['type'], 'header')"
                                                    }
                                                },
                                                "Filter_blocks_for_message_type": {
                                                    "runAfter": {
                                                        "Filter_blocks_for_message_header": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Query",
                                                    "inputs": {
                                                        "from": "@body('Parse_payload_JSON')?['message']?['blocks']",
                                                        "where": "@and(equals(item()?['type'], 'section'),contains(toLower(item()?['text']?['text']), toLower(parameters('slackApprovalSearchText'))))"
                                                    },
                                                    "description": "Looks for the section containing the approval text, as defined in the parameter - slackApprovalSearchText"
                                                },
                                                "HTTP_-_Slack_via_LA_-_Respond_to_message_": {
                                                    "runAfter": {
                                                        "Compose_response_body": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "body": "@outputs('Compose_response_body')",
                                                        "method": "POST",
                                                        "uri": "@parameters('slackResponseBrokerUrl')"
                                                    },
                                                    "runtimeConfiguration": {
                                                        "staticResult": {
                                                            "staticResultOptions": "Disabled",
                                                            "name": "HTTP_-_Slack_via_LA_-_Respond_to_message_0"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Parse_payload_JSON": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@body('Parse_payload_JSON')?['response_url']",
                                                                "@null"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "greater": [
                                                            "@length(body('Parse_payload_JSON')?['response_url'])",
                                                            0
                                                        ]
                                                    },
                                                    {
                                                        "startsWith": [
                                                            "@body('Parse_payload_JSON')?['response_url']",
                                                            "https:"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Parse_payload_JSON": {
                                            "runAfter": {
                                                "Compose_payload_data": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ParseJson",
                                            "inputs": {
                                                "content": "@outputs('Compose_payload_data')",
                                                "schema": {
                                                    "properties": {
                                                        "actions": {
                                                            "items": {
                                                                "properties": {
                                                                    "action_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "action_ts": {
                                                                        "type": "string"
                                                                    },
                                                                    "block_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "type": "string"
                                                                    },
                                                                    "value": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "action_id",
                                                                    "block_id",
                                                                    "value",
                                                                    "type",
                                                                    "action_ts"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "api_app_id": {
                                                            "type": "string"
                                                        },
                                                        "channel": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "container": {
                                                            "properties": {
                                                                "channel_id": {
                                                                    "type": "string"
                                                                },
                                                                "is_ephemeral": {
                                                                    "type": "boolean"
                                                                },
                                                                "message_ts": {
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "enterprise": {},
                                                        "is_enterprise_install": {
                                                            "type": "boolean"
                                                        },
                                                        "message": {
                                                            "properties": {
                                                                "app_id": {
                                                                    "type": "string"
                                                                },
                                                                "blocks": {
                                                                    "items": {
                                                                        "properties": {
                                                                            "block_id": {
                                                                                "type": "string"
                                                                            },
                                                                            "element": {
                                                                                "properties": {
                                                                                    "action_id": {
                                                                                        "type": "string"
                                                                                    },
                                                                                    "type": {
                                                                                        "type": "string"
                                                                                    }
                                                                                },
                                                                                "type": [
                                                                                    "object",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "elements": {
                                                                                "items": {
                                                                                    "properties": {
                                                                                        "action_id": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "type": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "value": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                },
                                                                                "type": [
                                                                                    "array",
                                                                                    "null"
                                                                                ]
                                                                            },
                                                                            "type": {
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "bot_id": {
                                                                    "type": "string"
                                                                },
                                                                "team": {
                                                                    "type": "string"
                                                                },
                                                                "text": {
                                                                    "type": "string"
                                                                },
                                                                "ts": {
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "type": "string"
                                                                },
                                                                "user": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "response_url": {
                                                            "type": "string"
                                                        },
                                                        "state": {
                                                            "properties": {
                                                                "values": {
                                                                    "type": [
                                                                        "object",
                                                                        "null"
                                                                    ]
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "team": {
                                                            "properties": {
                                                                "domain": {
                                                                    "type": "string"
                                                                },
                                                                "id": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        },
                                                        "token": {
                                                            "type": "string"
                                                        },
                                                        "trigger_id": {
                                                            "type": "string"
                                                        },
                                                        "type": {
                                                            "type": "string"
                                                        },
                                                        "user": {
                                                            "properties": {
                                                                "id": {
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "team_id": {
                                                                    "type": "string"
                                                                },
                                                                "username": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Filter_for_payload": [
                                            "Succeeded"
                                        ]
                                    },
                                    "else": {
                                        "actions": {
                                            "Terminate": {
                                                "runAfter": {},
                                                "type": "Terminate",
                                                "inputs": {
                                                    "runStatus": "Cancelled"
                                                }
                                            }
                                        }
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "equals": [
                                                    "@length(body('Filter_for_payload'))",
                                                    1
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Filter_for_payload": {
                                    "runAfter": {
                                        "Compose_form_data_array": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@outputs('Compose_form_data_array')",
                                        "where": "@equals(item()?['key'], 'payload')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_variable_-_responseResult": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {}
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[concat(variables('logicAppBaseName'),'-mcp')]",
            "location": "uksouth",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-mcp'))]": {}
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-mcp'))]",
                "[resourceId('Microsoft.Web/connections', parameters('SQLConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', parameters('KeyVaultConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "jobCompletionState": {
                            "defaultValue": 5,
                            "type": "Int"
                        },
                        "jobTypes": {
                            "defaultValue": [
                                "aaduser_add",
                                "aaduser_update",
                                "aaduser_guestinvite"
                            ],
                            "type": "Array"
                        },
                        "managedIdentityReferenceId": {
                            "defaultValue": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-mcp'))]",
                            "type": "String"
                        },
                        "notificationTargets": {
                            "defaultValue": {
                                "email": "https://",
                                "slack": "https://"
                            },
                            "type": "Object"
                        },
                        "sqlServerDatabase": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "sqlServerName": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "sqlServerTable": {
                            "defaultValue": "",
                            "type": "String"
                        }
                    },
                    "staticResults": {
                        "HTTP_-_WF_-_Handle_User_Invitation0": {
                            "status": "Succeeded",
                            "outputs": {
                                "headers": {},
                                "statusCode": "OK"
                            }
                        },
                        "HTTP_-_WF_-_Handle_generic_notification0": {
                            "status": "Succeeded",
                            "outputs": {
                                "headers": {},
                                "statusCode": "OK"
                            }
                        },
                        "HTTP_-_WF_-_Slack_Notification1": {
                            "status": "Succeeded",
                            "outputs": {
                                "headers": {},
                                "statusCode": "OK"
                            }
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5,
                                "startTime": "2023-12-21T16:00:00Z"
                            },
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 5,
                                "startTime": "2023-12-21T16:00:00Z"
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Compose_MI": {
                            "runAfter": {
                                "Initialize_variable_-_JobsPending": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Compose",
                            "inputs": {
                                "audience": "https://graph.microsoft.com",
                                "identity": "@{parameters('managedIdentityReferenceId')}",
                                "type": "ManagedServiceIdentity"
                            }
                        },
                        "Initialize_variable_-_JobSuccess": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "JobSuccess",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Initialize_variable_-_JobsPending": {
                            "runAfter": {
                                "Initialize_variable_-_JobSuccess": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "JobsPending",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Loop_until_JobsPending_is_empty": {
                            "actions": {
                                "Scope_-_handle_aaduser_inviteguest": {
                                    "actions": {
                                        "Filter_array_for_aaduser_inviteguest_actions": {
                                            "runAfter": {},
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('Filter_before_processing')",
                                                "where": "@and(\nequals(item()?['requestType'], 'aaduser_guestinvite'),\ncontains(variables('JobsPending'), item()?['id'])\n)"
                                            }
                                        },
                                        "For_each_aaduser_inviteguest_action": {
                                            "foreach": "@body('Filter_array_for_aaduser_inviteguest_actions')",
                                            "actions": {
                                                "Compose_aaduser_inviteguest_item_reference": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "@item()?['id']"
                                                },
                                                "Compose_invitee_upn": {
                                                    "runAfter": {
                                                        "Compose_aaduser_inviteguest_item_reference": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": "@item()?['objectReference']"
                                                },
                                                "Filter_this_item_out_of_JobsPending": {
                                                    "runAfter": {
                                                        "HTTP_-_WF_-_Handle_User_Invitation": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Query",
                                                    "inputs": {
                                                        "from": "@variables('JobsPending')",
                                                        "where": "@not(contains(item(), outputs('Compose_aaduser_inviteguest_item_reference')))"
                                                    }
                                                },
                                                "HTTP_-_WF_-_Handle_User_Invitation": {
                                                    "runAfter": {
                                                        "Compose_invitee_upn": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "method": "POST",
                                                        "uri": "https://destination"
                                                    },
                                                    "runtimeConfiguration": {
                                                        "staticResult": {
                                                            "staticResultOptions": "Enabled",
                                                            "name": "HTTP_-_WF_-_Handle_User_Invitation0"
                                                        }
                                                    }
                                                },
                                                "Set_variable_-_update_JobsPending_removing_this_aaduser_guestinvite": {
                                                    "runAfter": {
                                                        "Filter_this_item_out_of_JobsPending": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "JobsPending",
                                                        "value": "@body('Filter_this_item_out_of_JobsPending')"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Filter_array_for_aaduser_inviteguest_actions": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Tracking": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Scope"
                                },
                                "Scope_-_handle_aaduser_update": {
                                    "actions": {
                                        "Filter_array_for_aaduser_update_actions": {
                                            "runAfter": {},
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('Filter_before_processing')",
                                                "where": "@and(\nequals(item()?['requestType'], 'aaduser_aaduserupdate'),\ncontains(variables('JobsPending'), item()?['id']),\nnot(contains(variables('JobSuccess'), item()?['id']))\n)"
                                            }
                                        },
                                        "For_each_aaduser_update_action": {
                                            "foreach": "@body('Filter_out_jobs_which_are_complete')",
                                            "actions": {
                                                "Compose_job_record_ID": {
                                                    "runAfter": {
                                                        "Parse_JSON_-_job_record_-_aaduser_update": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Compose",
                                                    "inputs": "@body('Parse_JSON_-_job_record_-_aaduser_update')?['id']"
                                                },
                                                "HTTP_-_Graph_API_-_Get_User": {
                                                    "runAfter": {
                                                        "Compose_job_record_ID": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "authentication": "@outputs('Compose_MI')",
                                                        "method": "GET",
                                                        "uri": "https://graph.microsoft.com/v1.0/users/@{items('For_each_aaduser_update_action')['objectReference']}?$select=id,displayName,mail,jobTitle,givenName,surname,officeLocation,userPrincipalName,department"
                                                    }
                                                },
                                                "Parse_JSON_-_job_record_-_aaduser_update": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@items('For_each_aaduser_update_action')",
                                                        "schema": {
                                                            "properties": {
                                                                "@@odata.etag": {
                                                                    "type": "string"
                                                                },
                                                                "ItemInternalId": {
                                                                    "type": "string"
                                                                },
                                                                "attributeChange": {
                                                                    "type": "string"
                                                                },
                                                                "attributeValue": {
                                                                    "type": "string"
                                                                },
                                                                "complete": {
                                                                    "type": "boolean"
                                                                },
                                                                "id": {
                                                                    "type": "string"
                                                                },
                                                                "objectReference": {
                                                                    "type": "string"
                                                                },
                                                                "objectType": {
                                                                    "type": "string"
                                                                },
                                                                "requestReference": {
                                                                    "type": "string"
                                                                },
                                                                "requestType": {
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "type": "integer"
                                                                },
                                                                "timeGenerated": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "type": "object"
                                                        }
                                                    }
                                                },
                                                "Switch_on_status": {
                                                    "runAfter": {
                                                        "HTTP_-_Graph_API_-_Get_User": [
                                                            "Succeeded",
                                                            "Failed",
                                                            "TimedOut"
                                                        ]
                                                    },
                                                    "cases": {
                                                        "Case_-_0_-_New_job_to_be_processed": {
                                                            "case": 0,
                                                            "actions": {
                                                                "Condition_-_User_valid": {
                                                                    "actions": {
                                                                        "Condition_-_User_updated_successfully": {
                                                                            "actions": {
                                                                                "Append_to_JobSuccess_-_stage_0_successful": {
                                                                                    "runAfter": {},
                                                                                    "type": "AppendToArrayVariable",
                                                                                    "inputs": {
                                                                                        "name": "JobSuccess",
                                                                                        "value": "@outputs('Compose_job_record_ID')"
                                                                                    }
                                                                                }
                                                                            },
                                                                            "runAfter": {
                                                                                "HTTP_-_Graph_API_-_Update_User": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "expression": {
                                                                                "or": [
                                                                                    {
                                                                                        "equals": [
                                                                                            "@outputs('HTTP_-_Graph_API_-_Update_User')['statusCode']",
                                                                                            200
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "equals": [
                                                                                            "@outputs('HTTP_-_Graph_API_-_Update_User')['statusCode']",
                                                                                            202
                                                                                        ]
                                                                                    },
                                                                                    {
                                                                                        "equals": [
                                                                                            "@outputs('HTTP_-_Graph_API_-_Update_User')['statusCode']",
                                                                                            204
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type": "If"
                                                                        },
                                                                        "HTTP_-_Graph_API_-_Update_User": {
                                                                            "runAfter": {},
                                                                            "type": "Http",
                                                                            "inputs": {
                                                                                "authentication": "@outputs('Compose_MI')",
                                                                                "body": {
                                                                                    "@items('For_each_aaduser_update_action')['attributeChange']": "@items('For_each_aaduser_update_action')['AttributeValue']"
                                                                                },
                                                                                "method": "PATCH",
                                                                                "uri": "https://graph.microsoft.com/v1.0/users/@{items('For_each_aaduser_update_action')['objectReference']}"
                                                                            },
                                                                            "description": "To demonstrate: Wrapping some guards around attributeChange"
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@outputs('HTTP_-_Graph_API_-_Get_User')['statusCode']",
                                                                                    200
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                },
                                                                "Condition_-_job_processed_successfully": {
                                                                    "actions": {},
                                                                    "runAfter": {
                                                                        "Condition_-_User_valid": [
                                                                            "Succeeded"
                                                                        ]
                                                                    },
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "contains": [
                                                                                    "@variables('JobSuccess')",
                                                                                    ""
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            }
                                                        },
                                                        "Case_-_1_-_Job_requires_approval": {
                                                            "case": 1,
                                                            "actions": {}
                                                        },
                                                        "Case_-_2_-_Job_approved,_awaiting_action_to_be_performed": {
                                                            "case": 2,
                                                            "actions": {}
                                                        },
                                                        "Case_-_3_-_Job_action_performed,_awaiting_validation": {
                                                            "case": 3,
                                                            "actions": {
                                                                "Condition_-_user_validation_check": {
                                                                    "actions": {
                                                                        "Compose_user_object_as_array": {
                                                                            "runAfter": {
                                                                                "Parse_JSON_-_user_object": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Compose",
                                                                            "inputs": [
                                                                                "@body('Parse_JSON_-_user_object')"
                                                                            ]
                                                                        },
                                                                        "Condition_-_user_change_validated": {
                                                                            "actions": {},
                                                                            "runAfter": {
                                                                                "Filter_array_-_validate_attribute_change": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "expression": {
                                                                                "and": [
                                                                                    {
                                                                                        "greater": [
                                                                                            "@length(body('Filter_array_-_validate_attribute_change'))",
                                                                                            0
                                                                                        ]
                                                                                    }
                                                                                ]
                                                                            },
                                                                            "type": "If"
                                                                        },
                                                                        "Filter_array_-_validate_attribute_change": {
                                                                            "runAfter": {
                                                                                "Parse_JSON_faux_user_array": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "Query",
                                                                            "inputs": {
                                                                                "from": "@body('Parse_JSON_faux_user_array')",
                                                                                "where": "@equals(item()[body('Parse_JSON_-_job_record_-_aaduser_update')?['attributeChange']], body('Parse_JSON_-_job_record_-_aaduser_update')?['attributeValue'])"
                                                                            }
                                                                        },
                                                                        "Parse_JSON_-_user_object": {
                                                                            "runAfter": {},
                                                                            "type": "ParseJson",
                                                                            "inputs": {
                                                                                "content": "@body('HTTP_-_Graph_API_-_Get_User')",
                                                                                "schema": {
                                                                                    "properties": {
                                                                                        "@@odata.context": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "department": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "displayName": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "givenName": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "id": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "jobTitle": {},
                                                                                        "mail": {},
                                                                                        "officeLocation": {},
                                                                                        "surname": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "userPrincipalName": {
                                                                                            "type": "string"
                                                                                        }
                                                                                    },
                                                                                    "type": "object"
                                                                                }
                                                                            }
                                                                        },
                                                                        "Parse_JSON_faux_user_array": {
                                                                            "runAfter": {
                                                                                "Compose_user_object_as_array": [
                                                                                    "Succeeded"
                                                                                ]
                                                                            },
                                                                            "type": "ParseJson",
                                                                            "inputs": {
                                                                                "content": "@outputs('Compose_user_object_as_array')",
                                                                                "schema": {
                                                                                    "items": {
                                                                                        "properties": {
                                                                                            "@@odata.context": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "department": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "displayName": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "givenName": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "id": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "jobTitle": {},
                                                                                            "mail": {},
                                                                                            "officeLocation": {},
                                                                                            "surname": {
                                                                                                "type": "string"
                                                                                            },
                                                                                            "userPrincipalName": {
                                                                                                "type": "string"
                                                                                            }
                                                                                        },
                                                                                        "required": [
                                                                                            "@@odata.context",
                                                                                            "id",
                                                                                            "displayName",
                                                                                            "mail",
                                                                                            "jobTitle",
                                                                                            "givenName",
                                                                                            "surname",
                                                                                            "officeLocation",
                                                                                            "userPrincipalName",
                                                                                            "department"
                                                                                        ],
                                                                                        "type": "object"
                                                                                    },
                                                                                    "type": "array"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    "runAfter": {},
                                                                    "expression": {
                                                                        "and": [
                                                                            {
                                                                                "equals": [
                                                                                    "@outputs('HTTP_-_Graph_API_-_Get_User')['statusCode']",
                                                                                    200
                                                                                ]
                                                                            }
                                                                        ]
                                                                    },
                                                                    "type": "If"
                                                                }
                                                            }
                                                        },
                                                        "Case_-_4_-_Errors_were_found": {
                                                            "case": 4,
                                                            "actions": {}
                                                        },
                                                        "Case_-_5-_Job_completed": {
                                                            "case": 5,
                                                            "actions": {}
                                                        }
                                                    },
                                                    "default": {
                                                        "actions": {}
                                                    },
                                                    "expression": "@body('Parse_JSON_-_job_record_-_aaduser_update')?['status']",
                                                    "type": "Switch",
                                                    "description": "To discuss: switching versus filtering; demonstrate converting"
                                                }
                                            },
                                            "runAfter": {
                                                "Filter_array_for_aaduser_update_actions": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach",
                                            "description": "To discuss: When it is appropriate to re-parse",
                                            "runtimeConfiguration": {
                                                "concurrency": {
                                                    "repetitions": 1
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Scope_-_handle_aaduser_inviteguest": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Scope"
                                },
                                "Scope_-_handle_generic_approval_needed": {
                                    "actions": {},
                                    "runAfter": {
                                        "Tracking": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Scope",
                                    "description": "To demonstrate: Building the filter for this state"
                                },
                                "Scope_-_handle_generic_notification": {
                                    "actions": {
                                        "Filter_array_for_jobs_requiring_notification": {
                                            "runAfter": {},
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('Filter_before_processing')",
                                                "where": "@equals(item()?['status'], 1)"
                                            },
                                            "description": "To demonstrate: Upgrade this to an advanced filter"
                                        },
                                        "For_each_job_requiring_notification": {
                                            "foreach": "@body('Filter_array_for_jobs_requiring_notification')",
                                            "actions": {
                                                "Compose_generic_notification_message": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": {
                                                        "messageBody": "The request has been updated.",
                                                        "messageHeader": "Request update",
                                                        "messageRecipients": [
                                                            {
                                                                "recipient": "example",
                                                                "recipientType": "user"
                                                            }
                                                        ],
                                                        "messageType": "simple"
                                                    }
                                                },
                                                "HTTP_-_WF_-_Handle_generic_notification": {
                                                    "runAfter": {
                                                        "Compose_generic_notification_message": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Http",
                                                    "inputs": {
                                                        "body": "@outputs('Compose_generic_notification_message')",
                                                        "method": "POST",
                                                        "uri": "@{parameters('notificationTargets')?['slack']}"
                                                    },
                                                    "runtimeConfiguration": {
                                                        "staticResult": {
                                                            "staticResultOptions": "Enabled",
                                                            "name": "HTTP_-_WF_-_Handle_generic_notification0"
                                                        }
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Filter_array_for_jobs_requiring_notification": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach",
                                            "description": "To demonstrate: Building an array of recipients from the source data"
                                        }
                                    },
                                    "runAfter": {
                                        "Scope_-_handle_generic_approval_needed": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Scope"
                                },
                                "Scope_-_handle_job_completion": {
                                    "actions": {
                                        "Filter_array_for_jobs_ready_to_be_completed": {
                                            "runAfter": {},
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('Filter_before_processing')",
                                                "where": "@greaterOrEquals(item()?['status'], parameters('jobCompletionState'))"
                                            }
                                        },
                                        "For_each_job_ready_to_be_completed": {
                                            "foreach": "@body('Filter_array_for_jobs_ready_to_be_completed')",
                                            "actions": {
                                                "Compose_job_reference_to_mark_as_complete": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "@item()?['id']"
                                                },
                                                "Condition_notification_recipients_exist": {
                                                    "actions": {
                                                        "Compose_job_completion_message": {
                                                            "runAfter": {
                                                                "Select_job_completion_notification_recipients": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Compose",
                                                            "inputs": {
                                                                "messageBody": "The request has been completed.",
                                                                "messageHeader": "Request complete",
                                                                "messageRecipients": "@body('Select_job_completion_notification_recipients')",
                                                                "messageType": "simple"
                                                            }
                                                        },
                                                        "HTTP_-_WF_-_Slack_completion_notification": {
                                                            "runAfter": {
                                                                "Compose_job_completion_message": [
                                                                    "Succeeded"
                                                                ]
                                                            },
                                                            "type": "Http",
                                                            "inputs": {
                                                                "body": "@outputs('Compose_job_completion_message')",
                                                                "method": "POST",
                                                                "uri": "@{parameters('notificationTargets')?['slack']}"
                                                            },
                                                            "runtimeConfiguration": {
                                                                "staticResult": {
                                                                    "staticResultOptions": "Enabled",
                                                                    "name": "HTTP_-_WF_-_Slack_Notification1"
                                                                }
                                                            }
                                                        },
                                                        "Select_job_completion_notification_recipients": {
                                                            "runAfter": {},
                                                            "type": "Select",
                                                            "inputs": {
                                                                "from": "@split(item()?['requestUser'],',')",
                                                                "select": {
                                                                    "recipient": "@item()",
                                                                    "recipientType": "user"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Update_job_-_mark_as_complete": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "expression": {
                                                        "and": [
                                                            {
                                                                "not": {
                                                                    "equals": [
                                                                        "@item()?['requestUser']",
                                                                        "@null"
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "greater": [
                                                                    "@length(item()?['requestUser'])",
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "type": "If"
                                                },
                                                "Update_job_-_mark_as_complete": {
                                                    "runAfter": {
                                                        "Compose_job_reference_to_mark_as_complete": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": {
                                                            "complete": true
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['sql']['connectionId']"
                                                            }
                                                        },
                                                        "method": "patch",
                                                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('sqlServerName')))},@{encodeURIComponent(encodeURIComponent(parameters('sqlServerDatabase')))}/tables/@{encodeURIComponent(encodeURIComponent(parameters('sqlServerTable')))}/items/@{encodeURIComponent(encodeURIComponent(outputs('Compose_job_reference_to_mark_as_complete')))}"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Filter_array_for_jobs_ready_to_be_completed": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Foreach"
                                        }
                                    },
                                    "runAfter": {
                                        "Scope_-_handle_aaduser_update": [
                                            "Succeeded"
                                        ],
                                        "Scope_-_handle_generic_notification": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Scope"
                                },
                                "Tracking": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "JobsPending length: @{length(variables('JobsPending'))}"
                                }
                            },
                            "runAfter": {
                                "Scope_-_catch_unknown_activities": [
                                    "Succeeded"
                                ]
                            },
                            "expression": "@equals(length(variables('JobsPending')), 0)",
                            "limit": {
                                "count": 10,
                                "timeout": "PT1H"
                            },
                            "type": "Until"
                        },
                        "Scope_-_catch_unknown_activities": {
                            "actions": {
                                "Condition_is_valid_job_type": {
                                    "actions": {
                                        "Filter_original_list_to_exclude_unknown_job_IDs": {
                                            "runAfter": {
                                                "Select_unknown_job_IDs": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Query",
                                            "inputs": {
                                                "from": "@body('Filter_out_jobs_which_are_complete')",
                                                "where": "@not(contains(body('Select_unknown_job_IDs'), item()?['id']))"
                                            }
                                        },
                                        "Select_known_job_IDs": {
                                            "runAfter": {
                                                "Filter_original_list_to_exclude_unknown_job_IDs": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@body('Filter_original_list_to_exclude_unknown_job_IDs')",
                                                "select": "@item()?['id']"
                                            }
                                        },
                                        "Select_unknown_job_IDs": {
                                            "runAfter": {},
                                            "type": "Select",
                                            "inputs": {
                                                "from": "@body('Filter_for_unknown_job_types')",
                                                "select": "@item()?['id']"
                                            }
                                        },
                                        "Set_variable_JobsPending_to_exclude_unknown_job_types": {
                                            "runAfter": {
                                                "Select_known_job_IDs": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable",
                                            "inputs": {
                                                "name": "JobsPending",
                                                "value": "@body('Select_known_job_IDs')"
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Filter_for_unknown_job_types": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(body('Filter_for_unknown_job_types'))",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Filter_before_processing": {
                                    "runAfter": {
                                        "Condition_is_valid_job_type": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@body('Filter_out_jobs_which_are_complete')",
                                        "where": "@contains(variables('JobsPending'), item()?['id'])"
                                    },
                                    "description": "This is the last filter performed against the data before going into a loop to process, all subsequent filters can use this output"
                                },
                                "Filter_for_unknown_job_types": {
                                    "runAfter": {},
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@body('Filter_out_jobs_which_are_complete')",
                                        "where": "@not(contains(parameters('jobTypes'), item()?['requestType']))"
                                    }
                                }
                            },
                            "runAfter": {
                                "Scope_-_get_job_information": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope",
                            "description": "This is here to catch anything that isn't yet known and handled, and appropriately remove it from the JobsPending list. This could be done in the SQL query, but here for more examples of Filter and Select actions."
                        },
                        "Scope_-_get_job_information": {
                            "actions": {
                                "Compose_OData_filter_for_known_job_types": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "requestType eq '@{join(parameters('jobTypes'),concat('''',' or requestType eq ',''''))}'"
                                },
                                "Compose_OData_filter_for_unknown_job_types": {
                                    "runAfter": {
                                        "Compose_OData_filter_for_known_job_types": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Compose",
                                    "inputs": "not(@{outputs('Compose_OData_filter_for_known_job_types')})"
                                },
                                "Condition_unknown_job_types_exist": {
                                    "actions": {},
                                    "runAfter": {
                                        "Get_unknown_job_types": [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "greater": [
                                                    "@length(body('Get_unknown_job_types')?['value'])",
                                                    0
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If",
                                    "description": "To demonstrate: How to build up the SQL connector"
                                },
                                "Filter_out_jobs_which_are_complete": {
                                    "runAfter": {
                                        "Parse_JSON_-_Jobs_array": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Query",
                                    "inputs": {
                                        "from": "@body('Parse_JSON_-_Jobs_array')",
                                        "where": "@not(equals(item()['complete'], 1))"
                                    },
                                    "description": "This may be done at the Get rows level instead, but here as an example"
                                },
                                "Get_jobs_requiring_work": {
                                    "runAfter": {
                                        "Condition_unknown_job_types_exist": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('sqlServerName')))},@{encodeURIComponent(encodeURIComponent(parameters('sqlServerDatabase')))}/tables/@{encodeURIComponent(encodeURIComponent(parameters('sqlServerTable')))}/items",
                                        "queries": {
                                            "$filter": "complete eq 0 and @{outputs('Compose_OData_filter_for_known_job_types')}"
                                        }
                                    }
                                },
                                "Get_unknown_job_types": {
                                    "runAfter": {
                                        "Compose_OData_filter_for_unknown_job_types": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['sql']['connectionId']"
                                            }
                                        },
                                        "method": "get",
                                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('sqlServerName')))},@{encodeURIComponent(encodeURIComponent(parameters('sqlServerDatabase')))}/tables/@{encodeURIComponent(encodeURIComponent(parameters('sqlServerTable')))}/items",
                                        "queries": {
                                            "$filter": "complete eq 0 and @{outputs('Compose_OData_filter_for_unknown_job_types')}"
                                        }
                                    },
                                    "runtimeConfiguration": {
                                        "paginationPolicy": {
                                            "minimumItemCount": 100
                                        }
                                    }
                                },
                                "Parse_JSON_-_Jobs_array": {
                                    "runAfter": {
                                        "Get_jobs_requiring_work": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "ParseJson",
                                    "inputs": {
                                        "content": "@body('Get_jobs_requiring_work')?['value']",
                                        "schema": {
                                            "items": {
                                                "properties": {
                                                    "@@odata.etag": {
                                                        "type": "string"
                                                    },
                                                    "ItemInternalId": {
                                                        "type": "string"
                                                    },
                                                    "attributeChange": {
                                                        "type": "string"
                                                    },
                                                    "complete": {
                                                        "type": "boolean"
                                                    },
                                                    "id": {
                                                        "type": "string"
                                                    },
                                                    "notficationType": {
                                                        "type": "string"
                                                    },
                                                    "objectReference": {
                                                        "type": "string"
                                                    },
                                                    "objectType": {
                                                        "type": "string"
                                                    },
                                                    "requestReference": {
                                                        "type": "string"
                                                    },
                                                    "requestType": {
                                                        "type": "string"
                                                    },
                                                    "requestUser": {
                                                        "type": "string"
                                                    },
                                                    "status": {
                                                        "type": "integer"
                                                    },
                                                    "timeGenerated": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "@@odata.etag",
                                                    "ItemInternalId",
                                                    "requestReference",
                                                    "timeGenerated",
                                                    "status",
                                                    "complete",
                                                    "objectType",
                                                    "objectReference",
                                                    "attributeChange",
                                                    "id"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        }
                                    },
                                    "description": "To demonstrate: Final adjustments for potential null values"
                                },
                                "Select_job_references": {
                                    "runAfter": {
                                        "Filter_out_jobs_which_are_complete": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Select",
                                    "inputs": {
                                        "from": "@body('Filter_out_jobs_which_are_complete')",
                                        "select": "@item()?['id']"
                                    }
                                },
                                "Set_variable_JobsPending": {
                                    "runAfter": {
                                        "Select_job_references": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "JobsPending",
                                        "value": "@body('Select_job_references')"
                                    }
                                }
                            },
                            "runAfter": {
                                "Compose_MI": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Scope"
                        },
                        "Terminate": {
                            "runAfter": {
                                "Loop_until_JobsPending_is_empty": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Terminate",
                            "inputs": {
                                "runStatus": "Succeeded"
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "sql": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('SQLConnectionName'))]",
                                "connectionName": "sql",
                                "connectionProperties": {
                                    "authentication": {
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/',concat(variables('managedIdentityPrefix'),'-mcp'))]",
                                        "type": "ManagedServiceIdentity"
                                    }
                                },
                                "id": "[concat(subscription().id,'/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/sql')]"
                            }
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
    }
}